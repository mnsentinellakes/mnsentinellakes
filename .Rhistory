"Standard gill nets","Standard trap nets","Standard trap nets","Standard gill nets"),
stringsAsFactors = FALSE
)
#MNPCA Stations
mnpcastations=read.csv("D:/R_Scripts/Reference_Data/MNPCA_Stations.csv",stringsAsFactors = FALSE)
#Fish Abbreviations
fishabbreviations=read.csv("D:/R_Scripts/Reference_Data/Fish_Codes.csv",stringsAsFactors = FALSE)
usethis::use_data(sentinellakesmetadata,mnlakesmetadata,fishspeciesmetadata,mnpcastations,fishabbreviations,internal = FALSE,overwrite = TRUE)
devtools::build()
devtools::install("D:/R_Packages_Development/mnsentinellakes")
devtools::install("D:/R_Packages_Development/mnsentinellakes")
library(mnsentinellakes)
mnsentinellakes::fishabbreviations$Name[mnsentinellakes::fishabbreviations$Code==fishsurvey$species]
as.character(mnsentinellakes::fishabbreviations$Name)[as.character(mnsentinellakes::fishabbreviations$Code)==
as.character(fishsurvey$species)]
as.character(mnsentinellakes::fishabbreviations$Name)
as.character(mnsentinellakes::fishabbreviations$Code)
as.character(fishsurvey$species)
as.character(mnsentinellakes::fishabbreviations$Code)==
as.character(fishsurvey$species)
fishcode="BLB"
mnsentinellakes::fishabbreviations$Name[mnsentinellakes::fishabbreviations$Code==fishcode]
mnsentinellakes::fishabbreviations$Name[mnsentinellakes::fishabbreviations$Code==fishcode]
as.character(mnsentinellakes::fishabbreviations$Name[mnsentinellakes::fishabbreviations$Code==fishcode])
fishsurvey=y
lakename=mnsentinellakes::lakeidtoname(unique(fishsurvey$LakeId))
fishsurvey$quartileCount[fishsurvey$quartileCount=="N/A"]=NA
fishsurvey$quartileWeight[fishsurvey$quartileWeight=="N/A"]=NA
fishoutput=data.frame("Lake"=lakename,"LakeId"=unique(fishsurvey$LakeId),"Date"=fishsurvey$Date,"Species"=fishsurvey$species,
"Quartile_Count"=fishsurvey$quartileCount,"CPUE"=fishsurvey$CPUE,"Total_Catch"=fishsurvey$totalCatch,"Total_Weight"=fishsurvey$totalWeight,
"Quartile_Weight"=fishsurvey$quartileWeight,"Average_Weight"=fishsurvey$averageWeight,"Gear"=fishsurvey$gear,
"Gear_Count"=fishsurvey$gearCount)
fishoutput["Species_Name"]=mnsentinellakes::fishabbreviations$Name[mnsentinellakes::fishabbreviations$Code==fishoutput$Species]
fishoutput$Species
fishoutput["Species_Name"]=mnsentinellakes::fishabbreviations$Name[as.character(mnsentinellakes::fishabbreviations$Code)==as.character(fishoutput$Species)]
fishoutput=left_join(fishoutput,mnsentinellakes::fishabbreviations)
fishoutput=left_join(fishoutput,mnsentinellakes::fishabbreviations,by=c("Species","Code"))
fishoutput=left_join(fishoutput,mnsentinellakes::fishabbreviations,by=c("Species","code"))
mnsentinellakes::fishabbreviations
fishoutput=left_join(fishoutput,mnsentinellakes::fishabbreviations,by=c("Species","Code"))
fishoutput=left_join(fishoutput,mnsentinellakes::fishabbreviations,by=c("Species"="Code"))
View(fishoutput)
colnames(fishoutput$Name)="Species_Name"
colnames(fishoutput)[names(fishoutput)=="Name"]="Species_Name"
View(fishoutput)
fishoutput=data.frame("Lake"=lakename,"LakeId"=unique(fishsurvey$LakeId),"Date"=fishsurvey$Date,"Species"=fishsurvey$species,
"Quartile_Count"=fishsurvey$quartileCount,"CPUE"=fishsurvey$CPUE,"Total_Catch"=fishsurvey$totalCatch,"Total_Weight"=fishsurvey$totalWeight,
"Quartile_Weight"=fishsurvey$quartileWeight,"Average_Weight"=fishsurvey$averageWeight,"Gear"=fishsurvey$gear,
"Gear_Count"=fishsurvey$gearCount)
fishoutput=left_join(fishoutput,mnsentinellakes::fishabbreviations,by=c("Species"="Code"))
fishoutput=data.frame("Lake"=lakename,"LakeId"=unique(fishsurvey$LakeId),"Date"=fishsurvey$Date,"Species"=fishsurvey$species,
"Quartile_Count"=fishsurvey$quartileCount,"CPUE"=fishsurvey$CPUE,"Total_Catch"=fishsurvey$totalCatch,"Total_Weight"=fishsurvey$totalWeight,
"Quartile_Weight"=fishsurvey$quartileWeight,"Average_Weight"=fishsurvey$averageWeight,"Gear"=fishsurvey$gear,
"Gear_Count"=fishsurvey$gearCount)
fishoutput=suppressWarnings(left_join(fishoutput,mnsentinellakes::fishabbreviations,by=c("Species"="Code")))
colnames(fishoutput)[names(fishoutput)=="Name"]="Species_Name"
fishoutput=fishoutput[,c(1,2,3,4,13,5,6,7,8,9,10,11,12)]
fishoutput=fishoutput[order(fishoutput$Date),]
row.names(fishoutput)=NULL
#Datasets
#Sentinel LAkes
sentinellakesmetadata=data.frame(
"Lake"=c("Artichoke","Bear Head","Belle","Carlos","Carrie","Cedar","Echo","Elephant","Elk","Greenwood","Hill","Madison","Pearl","Peltier",
"Portage","Red Sand","Shaokotan","South Center","South Twin","St. James","St. Olaf","Tait","Ten Mile","Trout","White Iron"),
"Code"=c("ART","BHD","BEL","CLS","CAE","CED","ECH","EPH","ELK","GRW","HIL","MAD","PRL","PLT","PTG","RDS","SHK","SCR","STW","STJ","STO","TAI",
"TEN","TRT","WHI"),
"LakeId"=c("06000200","69025400","47004901","21005700","34003200","49014000","69061500","69081000","15001000","16007700","01014200",
"07004400","73003700","02000400","29025000","18038600","41008900","13002700","44001400","83004300","81000300","16038400",
"11041300","16004900","69000400"),
"Ecoregion"=c("Western Corn Belt Plains","Northern Lakes and Forests","North Central Hardwood Forests","North Central Hardwood Forests",
"Western Corn Belt Plains","North Central Hardwood Forests","Canadian Shield","Canadian Shield","Northern Lakes and Forests",
"Canadian Shield","Northern Lakes and Forests","Western Corn Belt Plains","North Central Hardwood Forests",
"North Central Hardwood Forests","Northern Lakes and Forests","Northern Lakes and Forests","Western Corn Belt Plains",
"North Central Hardwood Forests","Northern Lakes and Forests","Western Corn Belt Plains","Western Corn Belt Plains",
"Canadian Shield","Northern Lakes and Forests","Canadian Shield","Canadian Shield"),
"MultiLogger"=c(FALSE,TRUE,FALSE,TRUE,FALSE,FALSE,FALSE,FALSE,TRUE,TRUE,FALSE,TRUE,TRUE,TRUE,FALSE,FALSE,TRUE,TRUE,FALSE,FALSE,TRUE,FALSE,
FALSE,TRUE,TRUE),
"IATA"=c("AQP","ELO","HCD","AXN","LJF","14Y","ORB","ORB","PKD","CKC","GPZ","MKT","STC","ANE","PKD","BRD","CNB","OEO","FSE","JYG","ACQ","CKC",
"XVG","CKC","ELO"),
stringsAsFactors = FALSE
)
#Minnesota Lakes
mnlakesmetadata=read.csv("D:/R_Scripts/Reference_Data/alllakes.csv",stringsAsFactors = FALSE)
mnlakesmetadata$LakeId=mnsentinellakes::fixlakeid(mnlakesmetadata$LakeId)
mnlakesmetadata$Lake=as.character(mnlakesmetadata$Lake)
#Fish Species
fishspeciesmetadata=data.frame(
"Code"=c("LMB","SMB","BLG","YEP","NOP","BLC","BRB","YEB","RKB","BLB","WTS","WAE","LAT","CCF","MUE","WHB"),
"Name"=c("Largemouth Bass","Smallmouth Bass","Bluegill","Yellow Perch","Northern Pike","Black Crappie","Brown Bullhead",
"Yellow Bullhead","Rock Bass","Black Bullhead","White Sucker","Walleye","Lake Trout","Channel Catfish","Muskellunge","White Bass"),
"Group"=c("Centrarchid","Centrarchid","Centrarchid","Percid","Esocid","Centrarchid","Ictalurid","Ictalurid","Centrarchid","Ictalurid","Catastomid","Percid",
"Salmonid","Ictalurid","Esocid","Moronid"),
"Gear"=c("Standard electrofishing","Standard electrofishing","Standard trap nets","Standard gill nets","Standard gill nets",
"Standard trap nets","Standard gill nets","Standard gill nets","Standard gill nets","Standard gill nets","Standard gill nets","Standard gill nets",
"Standard gill nets","Standard trap nets","Standard trap nets","Standard gill nets"),
stringsAsFactors = FALSE
)
#MNPCA Stations
mnpcastations=read.csv("D:/R_Scripts/Reference_Data/MNPCA_Stations.csv",stringsAsFactors = FALSE)
#Fish Abbreviations
fishabbreviations=read.csv("D:/R_Scripts/Reference_Data/Fish_Codes.csv",stringsAsFactors = FALSE)
usethis::use_data(sentinellakesmetadata,mnlakesmetadata,fishspeciesmetadata,mnpcastations,fishabbreviations,internal = FALSE,overwrite = TRUE)
devtools::check()
devtools::check()
x=lakefinderdownload("81000300")
y=fishsurveydata(x)
y1=fish2sentinel(y)
y1=fish2sentinel(y)
x=lakefinderdownload("81000300")
y=fishsurveydata(x)
y1=fish2sentinel(y)
View(y1)
lake="Shaokotan"
wqstations=as.character(mnpcastations$ID_CODE[fixlakeid(mnpcastations$DOWLKNUM)==sentinellakesmetadata$LakeId[sentinellakesmetadata$Lake==lake]])
x=wqdatadownload(wqstations)
View(x)
wq2sentinel=function(wqdata)(
wqdata=x
lakename=unique(tools::toTitleCase(tolower(wqdata$stationName)))
)
wqdata=x
wq2sentinel=function(wqdata)(
lakename=unique(tools::toTitleCase(tolower(wqdata$stationName)))
)
wq2sentinel=function(wqdata)(
lakename=unique(tools::toTitleCase(tolower(wqdata$stationName)))
lakeid=unique(mnsentinellakes::fixlakeid(wqdata$stationId))
)
lakeid=unique(mnsentinellakes::fixlakeid(wqdata$stationId)
lakeid=unique(mnsentinellakes::fixlakeid(wqdata$stationId))
lakeid=mnsentinellakes::fixlakeid(unique(wqdata$stationId))
unique(substr(wqdata$stationId,1,10))
wq2sentinel=function(wqdata)(
lakename=unique(tools::toTitleCase(tolower(wqdata$stationName)))
lakeid=fixlakeid(unique(substr(wqdata$stationId,1,10)))
)
wq2sentinel=function(wqdata)(
lakename=unique(tools::toTitleCase(tolower(wqdata$stationName)))
lakeid=fixlakeid(unique(substr(wqdata$stationId,1,10)))
)
lakeid=fixlakeid(unique(substr(wqdata$stationId,1,10)))
lakeid=fixlakeid(unique(substr(wqdata$stationId,1,10)))
lakename=lakeidtoname(lakeid)
lakeid=fixlakeid(unique(substr(wqdata$stationId,1,10)))
lakename=lakeidtoname(lakeid)
wqoutput=data.frame("Lake"=lakename,"LakeId"=lakeid,"StationId"=wqdata$stationId,"Data"=as.Date(wqdata$sampleDate),"Time"=wqdata$sampleTime,
"Parameter"=wqdata$parameter,"GTLT"=wqdata$gtlt,"Value"=wqdata$result,"Unit"=wqdata$resultUnit,"Fraction_Type"=wqdata$sampleFractionType,
"Type"=wqdata$sampleType,"Method"=wqdata$testMethodName,"Upper_Depth"=wqdata$sampleUpperDepth,"Lower_Depth"=wqdata$sampleLowerDepth,
"Comments"=wqdata$comments)
View(wqdata)
View(wqoutput)
wqoutput=data.frame("Lake"=lakename,"LakeId"=lakeid,"StationId"=wqdata$stationId,"Date"=as.Date(wqdata$sampleDate),"Time"=wqdata$sampleTime,
"Parameter"=wqdata$parameter,"GTLT"=wqdata$gtlt,"Value"=wqdata$result,"Unit"=wqdata$resultUnit,"Fraction_Type"=wqdata$sampleFractionType,
"Type"=wqdata$sampleType,"Method"=wqdata$testMethodName,"Upper_Depth"=wqdata$sampleUpperDepth,"Lower_Depth"=wqdata$sampleLowerDepth,
"Comments"=wqdata$comments)
wqoutput=wqoutput[order(wqoutput$Date),]
row.names(wqoutput)=NULL
View(wqdata)
wqoutput$GTLT[wqoutput$GTLT=="(null)"]=NA
wqoutput$Value[wqoutput$Value=="(null)"]=NA
wqoutput$Upper_Depth[wqoutput$Upper_Depth=="(null)"]=NA
wqoutput=data.frame("Lake"=lakename,"LakeId"=lakeid,"StationId"=wqdata$stationId,"Date"=as.Date(wqdata$sampleDate),"Time"=wqdata$sampleTime,
"Parameter"=wqdata$parameter,"GTLT"=wqdata$gtlt,"Value"=wqdata$result,"Unit"=wqdata$resultUnit,"Fraction_Type"=wqdata$sampleFractionType,
"Type"=wqdata$sampleType,"Method"=wqdata$testMethodName,"Upper_Depth"=wqdata$sampleUpperDepth,"Lower_Depth"=wqdata$sampleLowerDepth,
"Comments"=wqdata$comments)
wqoutput=wqoutput[order(wqoutput$Date),]
row.names(wqoutput)=NULL
wqoutput$GTLT[wqoutput$GTLT=="(null)"]=NA
wqoutput$Value[wqoutput$Value=="(null)"]=NA
wqoutput$Upper_Depth[wqoutput$Upper_Depth=="(null)"]=NA
wqoutput=data.frame("Lake"=lakename,"LakeId"=lakeid,"StationId"=wqdata$stationId,"Date"=as.Date(wqdata$sampleDate),"Time"=wqdata$sampleTime,
"Parameter"=wqdata$parameter,"GTLT"=wqdata$gtlt,"Value"=wqdata$result,"Unit"=wqdata$resultUnit,"Fraction_Type"=wqdata$sampleFractionType,
"Type"=wqdata$sampleType,"Method"=wqdata$testMethodName,"Upper_Depth"=wqdata$sampleUpperDepth,"Lower_Depth"=wqdata$sampleLowerDepth,
"Comments"=wqdata$comments,stringsAsFactors = FALSE)
wqoutput=wqoutput[order(wqoutput$Date),]
row.names(wqoutput)=NULL
wqoutput$GTLT[wqoutput$GTLT=="(null)"]=NA
wqoutput$Value[wqoutput$Value=="(null)"]=NA
wqoutput$Upper_Depth[wqoutput$Upper_Depth=="(null)"]=NA
wqoutput=data.frame("Lake"=lakename,"LakeId"=lakeid,"StationId"=wqdata$stationId,"Date"=as.Date(wqdata$sampleDate),"Time"=wqdata$sampleTime,
"Parameter"=wqdata$parameter,"GTLT"=wqdata$gtlt,"Value"=wqdata$result,"Unit"=wqdata$resultUnit,"Fraction_Type"=wqdata$sampleFractionType,
"Type"=wqdata$sampleType,"Method"=wqdata$testMethodName,"Upper_Depth"=wqdata$sampleUpperDepth,"Lower_Depth"=wqdata$sampleLowerDepth,
"Comments"=wqdata$comments,stringsAsFactors = FALSE)
wqoutput=wqoutput[order(wqoutput$Date),]
row.names(wqoutput)=NULL
wqoutput$GTLT[wqoutput$GTLT=="(null)"]=NA
wqoutput$Value[wqoutput$Value=="(null)"]=NA
wqoutput=data.frame("Lake"=lakename,"LakeId"=lakeid,"StationId"=wqdata$stationId,"Date"=as.Date(wqdata$sampleDate),"Time"=wqdata$sampleTime,
"Parameter"=as.character(wqdata$parameter),"GTLT"=wqdata$gtlt,"Value"=wqdata$result,"Unit"=as.character(wqdata$resultUnit),
"Fraction_Type"=as.character(wqdata$sampleFractionType),"Type"=as.character(wqdata$sampleType),
"Method"=as.character(wqdata$testMethodName),"Upper_Depth"=as.numeric(as.character(wqdata$sampleUpperDepth)),
"Lower_Depth"=as.numeric(as.character(wqdata$sampleLowerDepth)),"Comments"=as.character(wqdata$comments),stringsAsFactors = FALSE)
wqoutput=data.frame("Lake"=lakename,"LakeId"=lakeid,"StationId"=wqdata$stationId,"Date"=as.Date(wqdata$sampleDate),"Time"=wqdata$sampleTime,
"Parameter"=as.character(wqdata$parameter),"GTLT"=wqdata$gtlt,"Value"=wqdata$result,"Unit"=as.character(wqdata$resultUnit),
"Fraction_Type"=as.character(wqdata$sampleFractionType),"Type"=as.character(wqdata$sampleType),
"Method"=as.character(wqdata$testMethodName),"Upper_Depth"=suppressWarnings(as.numeric(as.character(wqdata$sampleUpperDepth))),
"Lower_Depth"=suppressWarnings(as.numeric(as.character(wqdata$sampleLowerDepth))),"Comments"=as.character(wqdata$comments),
stringsAsFactors = FALSE)
wqoutput=wqoutput[order(wqoutput$Date),]
row.names(wqoutput)=NULL
wqoutput$GTLT[wqoutput$GTLT=="(null)"]=NA
wqoutput$Value[wqoutput$Value=="(null)"]=NA
wqoutput=data.frame("Lake"=lakename,"LakeId"=lakeid,"StationId"=wqdata$stationId,"Date"=as.Date(wqdata$sampleDate),"Time"=wqdata$sampleTime,
"Parameter"=as.character(wqdata$parameter),"GTLT"=wqdata$gtlt,"Value"=wqdata$result,"Unit"=as.character(wqdata$resultUnit),
"Fraction_Type"=as.character(wqdata$sampleFractionType),"Type"=as.character(wqdata$sampleType),
"Method"=as.character(wqdata$testMethodName),"Upper_Depth"=suppressWarnings(as.numeric(as.character(wqdata$sampleUpperDepth))),
"Lower_Depth"=suppressWarnings(as.numeric(as.character(wqdata$sampleLowerDepth))),"Comments"=as.character(wqdata$comments),
stringsAsFactors = FALSE)
wqoutput$Comments[wqoutput$Comments=="(null)"]=NA
wqoutput=data.frame("Lake"=lakename,"LakeId"=lakeid,"StationId"=wqdata$stationId,"Date"=as.Date(wqdata$sampleDate),"Time"=wqdata$sampleTime,
"Parameter"=as.character(wqdata$parameter),"GTLT"=wqdata$gtlt,"Value"=wqdata$result,"Unit"=as.character(wqdata$resultUnit),
"Fraction_Type"=as.character(wqdata$sampleFractionType),"Type"=as.character(wqdata$sampleType),
"Method"=as.character(wqdata$testMethodName),"Upper_Depth"=suppressWarnings(as.numeric(as.character(wqdata$sampleUpperDepth))),
"Lower_Depth"=suppressWarnings(as.numeric(as.character(wqdata$sampleLowerDepth))),"Comments"=as.character(wqdata$comments),
stringsAsFactors = FALSE)
wqoutput=wqoutput[order(wqoutput$Date),]
row.names(wqoutput)=NULL
wqoutput$GTLT[wqoutput$GTLT=="(null)"]=NA
wqoutput$Value[wqoutput$Value=="(null)"]=NA
wqoutput$Comments[wqoutput$Comments=="(null)"]=NA
i=unique(wqdata$stationName)
wqdataselect=wqdata[wqdata$stationName==i,]
lakeid=fixlakeid(unique(substr(wqdataselect$stationId,1,10)))
lakename=lakeidtoname(lakeid)
wqoutput=data.frame("Lake"=lakename,"LakeId"=lakeid,"StationId"=wqdataselect$stationId,"Date"=as.Date(wqdataselect$sampleDate),"Time"=wqdataselect$sampleTime,
"Parameter"=as.character(wqdataselect$parameter),"GTLT"=wqdataselect$gtlt,"Value"=wqdataselect$result,
"Unit"=as.character(wqdataselect$resultUnit),"Fraction_Type"=as.character(wqdataselect$sampleFractionType),
"Type"=as.character(wqdataselect$sampleType),"Method"=as.character(wqdataselect$testMethodName),
"Upper_Depth"=suppressWarnings(as.numeric(as.character(wqdataselect$sampleUpperDepth))),
"Lower_Depth"=suppressWarnings(as.numeric(as.character(wqdataselect$sampleLowerDepth))),"Comments"=as.character(wqdataselect$comments),
stringsAsFactors = FALSE)
wqoutput=wqoutput[order(wqoutput$Date),]
row.names(wqoutput)=NULL
wqoutput$GTLT[wqoutput$GTLT=="(null)"]=NA
wqoutput$Value[wqoutput$Value=="(null)"]=NA
wqoutput$Comments[wqoutput$Comments=="(null)"]=NA
wqoutput=NULL
for (i in unique(wqdata$stationName)){
wqdataselect=wqdata[wqdata$stationName==i,]
lakeid=fixlakeid(unique(substr(wqdataselect$stationId,1,10)))
lakename=lakeidtoname(lakeid)
wqoutputrow=data.frame("Lake"=lakename,"LakeId"=lakeid,"StationId"=wqdataselect$stationId,"Date"=as.Date(wqdataselect$sampleDate),
"Time"=wqdataselect$sampleTime,"Parameter"=as.character(wqdataselect$parameter),"GTLT"=wqdataselect$gtlt,"Value"=wqdataselect$result,
"Unit"=as.character(wqdataselect$resultUnit),"Fraction_Type"=as.character(wqdataselect$sampleFractionType),
"Type"=as.character(wqdataselect$sampleType),"Method"=as.character(wqdataselect$testMethodName),
"Upper_Depth"=suppressWarnings(as.numeric(as.character(wqdataselect$sampleUpperDepth))),
"Lower_Depth"=suppressWarnings(as.numeric(as.character(wqdataselect$sampleLowerDepth))),
"Comments"=as.character(wqdataselect$comments),stringsAsFactors = FALSE)
wqoutput=rbind(wqoutput,wqoutputrow)
}
wqoutput=wqoutput[order(wqoutput$Lake,wqoutput$Date),]
View(wqoutput)
row.names(wqoutput)=NULL
wqoutput$GTLT[wqoutput$GTLT=="(null)"]=NA
wqoutput$Value[wqoutput$Value=="(null)"]=NA
wqoutput$Comments[wqoutput$Comments=="(null)"]=NA
devtools::check()
devtools::build()
devtools::install("D:/R_Packages_Development/mnsentinellakes")
library(mnsentinellakes)
z=wq2sentinel(x)
wqstations=as.character(mnpcastations$ID_CODE[fixlakeid(mnpcastations$DOWLKNUM)==sentinellakesmetadata$LakeId[sentinellakesmetadata$Lake==lake]])
library(mnsentinellakes)
lake="Shaokotan"
wqstations=as.character(mnpcastations$ID_CODE[fixlakeid(mnpcastations$DOWLKNUM)==sentinellakesmetadata$LakeId[sentinellakesmetadata$Lake==lake]])
x=wqdatadownload(wqstations)
z=wq2sentinel(x)
View(z)
waterleveldata("02000400")
lakeid="21005700"
iceoutput=NULL
inputurl=paste0("https://maps1.dnr.state.mn.us/cgi-bin/climatology/ice_",i,"_by_lake.cgi?id=",lakeid)
i="in"
inputurl=paste0("https://maps1.dnr.state.mn.us/cgi-bin/climatology/ice_",i,"_by_lake.cgi?id=",lakeid)
x=as.character(read_html(inputurl))
x=as.character(rvest::read_html(inputurl))
x=as.character(selectr::read_html(inputurl))
x=as.character(selecti::read_html(inputurl))
x=as.character(rvest::html(inputurl))
install.packages("rvest")
install.packages("rvest")
x=as.character(rvest::read_html(inputurl))
x=as.character(xml2::read_html(inputurl))
x=as.character(regmatches(x,gregexpr("\\[.+\\]",x)))
x=gsub(c("\\["),"",x)
x=gsub(c("\\]"),"",x)
x=data.frame(strsplit(x,"[},{]"))
View(x)
colnames(x)="Row"
x=separate(x,"Row",
into = c("Header","Value"),
sep = "[:]")
x=tidyr::separate(x,"Row",
into = c("Header","Value"),
sep = "[:]")
x=x[!is.na(x$Value),]
x$Header=gsub("\"","",x$Header)
x$Value=gsub("\"","",x$Value)
reshapedf=NULL
for (k in 0:((nrow(x)/3)-1)){
selection=(k*3)+c(1,2,3)
rows=x[selection,]
#Date
daterow=rows$Value[which(rows$Header=="date")]
#Source
sourcerow=rows$Value[which(rows$Header=="source")]
#Comment
commentrow=rows$Value[which(rows$Header=="comments")]
reshaperow=data.frame("Date"=daterow,"Source"=sourcerow,"Comment"=commentrow)
reshapedf=rbind(reshapedf,reshaperow)
}
View(reshapedf)
reshapedf["Ice_Status"]=icestatus
icestatus="In"
reshapedf["Ice_Status"]=icestatus
lakeid="21005700"
iceoutput=NULL
for (i in c("in","out")){
if (i=="in"){
icestatus="In"
}else if (i=="out"){
icestatus="Out"
}
inputurl=paste0("https://maps1.dnr.state.mn.us/cgi-bin/climatology/ice_",i,"_by_lake.cgi?id=",lakeid)
x=as.character(xml2::read_html(inputurl))
x=as.character(regmatches(x,gregexpr("\\[.+\\]",x)))
if(x=="character(0)"){
reshapedf=NULL
}else{
x=gsub(c("\\["),"",x)
x=gsub(c("\\]"),"",x)
x=data.frame(strsplit(x,"[},{]"))
colnames(x)="Row"
x=tidyr::separate(x,"Row",
into = c("Header","Value"),
sep = "[:]")
x=x[!is.na(x$Value),]
x$Header=gsub("\"","",x$Header)
x$Value=gsub("\"","",x$Value)
reshapedf=NULL
for (k in 0:((nrow(x)/3)-1)){
selection=(k*3)+c(1,2,3)
rows=x[selection,]
#Date
daterow=rows$Value[which(rows$Header=="date")]
#Source
sourcerow=rows$Value[which(rows$Header=="source")]
#Comment
commentrow=rows$Value[which(rows$Header=="comments")]
reshaperow=data.frame("Date"=daterow,"Source"=sourcerow,"Comment"=commentrow)
reshapedf=rbind(reshapedf,reshaperow)
}
reshapedf["Ice_Status"]=icestatus
}
iceoutput=rbind(iceoutput,reshapedf)
}
iceoutput$Date=as.Date(iceoutput$Date)
iceoutput=iceoutput[order(iceoutput$Date),]
iceoutput=data.frame("Lake"=input$iceinput,"DOWLKNUM"=icedowlknum,"Date"=iceoutput$Date,"Ice_Status"=iceoutput$Ice_Status,
"Source"=iceoutput$Source,"Comments"=iceoutput$Comment)
lakename=mnsentinellakes::mnlakesmetadata$Lake[mnsentinellakes::mnlakesmetadata$LakeId==lakeid]
iceoutput=data.frame("Lake"=lakename,"LakeId"=lakeid,"Date"=iceoutput$Date,"Ice_Status"=iceoutput$Ice_Status,
"Source"=iceoutput$Source,"Comments"=iceoutput$Comment)
View(iceoutput)
devtools::check()
for (k in 0:((nrow(x)/3)-1)){
selection=(k*3)+c(1,2,3)
rows=x[selection,]
#Date
daterow=rows$Value[which(rows$Header=="date")]
#Source
sourcerow=rows$Value[which(rows$Header=="source")]
#Comment
commentrow=rows$Value[which(rows$Header=="comments")]
reshaperow=data.frame("Date"=daterow,"Source"=sourcerow,"Comment"=commentrow)
reshapedf=rbind(reshapedf,reshaperow)
}
devtools::check()
devtools::build()
devtools::install("D:/R_Packages_Development/mnsentinellakes")
library(mnsentinellakes)
icedownload("11041300")
lakeid="11041300"
lakename=mnsentinellakes::mnlakesmetadata$Lake[mnsentinellakes::mnlakesmetadata$LakeId==lakeid]
iceoutput=NULL
i="in"
if (i=="in"){
icestatus="In"
}else if (i=="out"){
icestatus="Out"
}
inputurl=paste0("https://maps1.dnr.state.mn.us/cgi-bin/climatology/ice_",i,"_by_lake.cgi?id=",lakeid)
x=as.character(xml2::read_html(inputurl))
x=as.character(regmatches(x,gregexpr("\\[.+\\]",x)))
x=gsub(c("\\["),"",x)
x=gsub(c("\\]"),"",x)
x=data.frame(strsplit(x,"[},{]"))
colnames(x)="Row"
x=tidyr::separate(
x,
"Row",
into = c("Header","Value"),
sep = "[:]")
x=suppressWarnings(tidyr::separate(
x,
"Row",
into = c("Header","Value"),
sep = "[:]"))
x=suppressWarning(tidyr::separate(
x,
"Row",
into = c("Header","Value"),
sep = "[:]"))
x=suppressWarnings(tidyr::separate(
x,
"Row",
into = c("Header","Value"),
sep = "[:]"))
x=suppressWarnings(
tidyr::separate(
x,
"Row",
into = c("Header","Value"),
sep = "[:]"))
x=tidyr::separate(
x,
"Row",
into = c("Header","Value"),
sep = "[:]")
x=suppressWarnings(tidyr::separate(
x,
"Row",
into = c("Header","Value"),
sep = "[:]"))
x=tidyr::separate(
x,
"Row",
into = c("Header","Value"),
sep = "[:]")
x=as.character(xml2::read_html(inputurl))
x=as.character(regmatches(x,gregexpr("\\[.+\\]",x)))
x=gsub(c("\\["),"",x)
x=gsub(c("\\]"),"",x)
x=data.frame(strsplit(x,"[},{]"))
View(x)
colnames(x)="Row"
x=tidyr::separate(
x,
"Row",
into = c("Header","Value"),
sep = "[:]")
x=suppressWarnings(tidyr::separate(
x,
"Row",
into = c("Header","Value"),
sep = "[:]"))
x=tidyr::separate(
x,
"Row",
into = c("Header","Value"),
sep = "[:]")
colnames(x)="Row"
x=tidyr::separate(
x,
"Row",
into = c("Header","Value"),
sep = "[:]")
x=as.character(xml2::read_html(inputurl))
x=as.character(regmatches(x,gregexpr("\\[.+\\]",x)))
x=gsub(c("\\["),"",x)
x=gsub(c("\\]"),"",x)
x=data.frame(strsplit(x,"[},{]"))
colnames(x)="Row"
x=suppressWarnings(tidyr::separate(
x,
"Row",
into = c("Header","Value"),
sep = "[:]"))
x=x[!is.na(x$Value),]
x$Header=gsub("\"","",x$Header)
x$Value=gsub("\"","",x$Value)
reshapedf=NULL
for (k in 0:((nrow(x)/3)-1)){
selection=(k*3)+c(1,2,3)
rows=x[selection,]
#Date
daterow=rows$Value[which(rows$Header=="date")]
#Source
sourcerow=rows$Value[which(rows$Header=="source")]
#Comment
commentrow=rows$Value[which(rows$Header=="comments")]
reshaperow=data.frame("Date"=daterow,"Source"=sourcerow,"Comment"=commentrow)
reshapedf=rbind(reshapedf,reshaperow)
}
reshapedf["Ice_Status"]=icestatus
devtools::build()
devtools::install("D:/R_Packages_Development/mnsentinellakes")
icedownload("11041300")
icedownload(mnsentinellakes::lakenametoid("Mary",county = "Wright"))
icedownload(lakenametoid("Mary",county = "Wright"))
lakenametoid("Mary",county = "Wright")
icedownload(lakenametoid("Buffalo",county = "Wright"))
file.exists("~/.ssh/id_rsa.pub")
library(mnsentinellakes)
file.exists("~/.ssh/id_rsa.pub")
file.exists("D:/Users/timarti1/.ssh/id_rsa")
getwd()
devtools::install_git("mnsentinellakes/mnsentinellakes")
?devtools::install_git
devtools::install_github("mnsentinellakes/mnsentinellakes")
library(mnsentinellakes)
mnlakesmetadata
