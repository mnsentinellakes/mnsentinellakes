dsn = saveto,
layer = gsub(".gpx","",i),
driver = "ESRI Shapefile"
)
}
}
gpx2shp=function(folder,saveto=NULL){
gpxfiles=list.files(folder,pattern = ".gpx")
for (i in gpxfiles){
x=plotKML::readGPX(
paste0(folder,i),
metadata = FALSE,
bounds = FALSE,
waypoints = TRUE,
tracks = FALSE,
routes = FALSE)$waypoints
y=sp::SpatialPointsDataFrame(
coords = as.matrix(data.frame(x$lon,x$lat)),
proj4string = sp::CRS("+init=epsg:4326"),
data = x
)
if (is.null(saveto)){
dir.create(paste0(saveto,"/SHP"))
rgdal::writeOGR(
obj = y,
dsn = paste0(folder,"/SHP"),
layer = gsub(".gpx","",i),
driver = "ESRI Shapefile"
)
}else{
rgdal::writeOGR(
obj = y,
dsn = saveto,
layer = gsub(".gpx","",i),
driver = "ESRI Shapefile"
)
}
}
}
gpxfiles("D:/Datasets/GPS/Montana_1/GPX")
gpx2shp("D:/Datasets/GPS/Montana_1/GPX")
gpx2shp=function(folder,saveto=NULL){
gpxfiles=list.files(folder,pattern = ".gpx")
for (i in gpxfiles){
x=plotKML::readGPX(
paste0(folder,"/",i),
metadata = FALSE,
bounds = FALSE,
waypoints = TRUE,
tracks = FALSE,
routes = FALSE)$waypoints
y=sp::SpatialPointsDataFrame(
coords = as.matrix(data.frame(x$lon,x$lat)),
proj4string = sp::CRS("+init=epsg:4326"),
data = x
)
if (is.null(saveto)){
dir.create(paste0(saveto,"/SHP"))
rgdal::writeOGR(
obj = y,
dsn = paste0(folder,"/SHP"),
layer = gsub(".gpx","",i),
driver = "ESRI Shapefile"
)
}else{
rgdal::writeOGR(
obj = y,
dsn = saveto,
layer = gsub(".gpx","",i),
driver = "ESRI Shapefile"
)
}
}
}
gpx2shp("D:/Datasets/GPS/Montana_1/GPX")
gpx2shp("D:/Datasets/GPS/Montana_1/GPX",
saveto = "D:/Datasets/GPS/Montana_1/SHP")
devtools::check()
devtools::check()
library(ggpubr)
ggscatter
x=wqdatadownload(wqstations("21005700"))
wqdata=x
colnames(wqdata$paramater)=colnames("Parameter")
View(wqdata)
colnames(wqdata$parameter)=colnames("Parameter")
colnames(wqdata)[colnames(wqdata)=="parameter"]="Parameter"
devtools::check()
devtools::check()
devtools::check()
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
devtools::check()
devtools::check()
install.packages("rlang")
devtools::check()
devtools::check()
devtools::build()
devtools::install("D:/R_Packages_Development/mnsentinellakes")
library(mnsentinellakes)
library(mnsentinellakes)
library(devtools)
x=wqdatadownload(wqstations("21005700"))
wqparameters(x)
devtools::check()
devtools::build()
devtools::install("D:/R_Packages_Development/mnsentinellakes")
library(mnsentinellakes)
x=wqdatadownload(
wqstations(lakenametoid("Buffalo",county = "Wright"))
)
y=wqmonthtable(
wqdata=x,
parameters = wqparameters(x),
months = c(6,7,8,9)
)
wqmonthtrendplots(
plotdata = y,
saveto = "D:/Analyses/WQ",
maxpvalue = .6
)
devtools::check()
remove.packages("mnsentinellakes", lib="~/R/win-library/3.5")
install_github("mnsentinellakes/mnsentinellakes")
library(mnsentinellakes)
wqparameters
?wqparameters
gpx2shp(
folder = "D:/Datasets/GPS/Montana_2/GPX"
)
gpx2shp(
folder = "D:/Datasets/GPS/Montana_1/GPX"
)
gpx2shp(
folder = "D:/Datasets/GPS/Montana_1/GPX"
)
folder="D:/Datasets/GPS/Montana_2/GPX"
gpxfiles=list.files(folder,pattern = ".gpx")
for (i in gpxfiles){
x=plotKML::readGPX(
paste0(folder,"/",i),
metadata = FALSE,
bounds = FALSE,
waypoints = TRUE,
tracks = FALSE,
routes = FALSE)$waypoints
y=sp::SpatialPointsDataFrame(
coords = as.matrix(data.frame(x$lon,x$lat)),
proj4string = sp::CRS("+init=epsg:4326"),
data = x
)
if (is.null(saveto)){
dir.create(paste0(saveto,"/SHP"))
rgdal::writeOGR(
obj = y,
dsn = paste0(folder,"/SHP"),
layer = gsub(".gpx","",i),
driver = "ESRI Shapefile"
)
}else{
rgdal::writeOGR(
obj = y,
dsn = saveto,
layer = gsub(".gpx","",i),
driver = "ESRI Shapefile"
)
}
}
saveto=NULL
for (i in gpxfiles){
x=plotKML::readGPX(
paste0(folder,"/",i),
metadata = FALSE,
bounds = FALSE,
waypoints = TRUE,
tracks = FALSE,
routes = FALSE)$waypoints
y=sp::SpatialPointsDataFrame(
coords = as.matrix(data.frame(x$lon,x$lat)),
proj4string = sp::CRS("+init=epsg:4326"),
data = x
)
if (is.null(saveto)){
dir.create(paste0(saveto,"/SHP"))
rgdal::writeOGR(
obj = y,
dsn = paste0(folder,"/SHP"),
layer = gsub(".gpx","",i),
driver = "ESRI Shapefile"
)
}else{
rgdal::writeOGR(
obj = y,
dsn = saveto,
layer = gsub(".gpx","",i),
driver = "ESRI Shapefile"
)
}
}
gpxfiles
i=gpxfiles[11]
x=plotKML::readGPX(
paste0(folder,"/",i),
metadata = FALSE,
bounds = FALSE,
waypoints = TRUE,
tracks = FALSE,
routes = FALSE)$waypoints
y=sp::SpatialPointsDataFrame(
coords = as.matrix(data.frame(x$lon,x$lat)),
proj4string = sp::CRS("+init=epsg:4326"),
data = x
)
if (!is.null(x)){
y=sp::SpatialPointsDataFrame(
coords = as.matrix(data.frame(x$lon,x$lat)),
proj4string = sp::CRS("+init=epsg:4326"),
data = x
)
if (is.null(saveto)){
dir.create(paste0(saveto,"/SHP"))
rgdal::writeOGR(
obj = y,
dsn = paste0(folder,"/SHP"),
layer = gsub(".gpx","",i),
driver = "ESRI Shapefile"
)
}else{
rgdal::writeOGR(
obj = y,
dsn = saveto,
layer = gsub(".gpx","",i),
driver = "ESRI Shapefile"
)
}
}
gpx2shp=function(folder,saveto=NULL){
folder="D:/Datasets/GPS/Montana_2/GPX"
gpxfiles=list.files(folder,pattern = ".gpx")
for (i in gpxfiles){
x=plotKML::readGPX(
paste0(folder,"/",i),
metadata = FALSE,
bounds = FALSE,
waypoints = TRUE,
tracks = FALSE,
routes = FALSE)$waypoints
if (!is.null(x)){
y=sp::SpatialPointsDataFrame(
coords = as.matrix(data.frame(x$lon,x$lat)),
proj4string = sp::CRS("+init=epsg:4326"),
data = x
)
if (is.null(saveto)){
dir.create(paste0(saveto,"/SHP"))
rgdal::writeOGR(
obj = y,
dsn = paste0(folder,"/SHP"),
layer = gsub(".gpx","",i),
driver = "ESRI Shapefile"
)
}else{
rgdal::writeOGR(
obj = y,
dsn = saveto,
layer = gsub(".gpx","",i),
driver = "ESRI Shapefile"
)
}
}
}
}
gpx2shp(
folder = "D:/Datasets/GPS/Montana_2/GPX"
)
gpx2shp=function(folder,saveto=NULL){
folder="D:/Datasets/GPS/Montana_2/GPX"
gpxfiles=list.files(folder,pattern = ".gpx")
for (i in gpxfiles){
x=plotKML::readGPX(
paste0(folder,"/",i),
metadata = FALSE,
bounds = FALSE,
waypoints = TRUE,
tracks = FALSE,
routes = FALSE)$waypoints
if (!is.null(x)){
y=sp::SpatialPointsDataFrame(
coords = as.matrix(data.frame(x$lon,x$lat)),
proj4string = sp::CRS("+init=epsg:4326"),
data = x
)
if (is.null(saveto)){
dir.create(paste0(saveto,"/SHP"))
rgdal::writeOGR(
obj = y,
dsn = paste0(folder,"/SHP"),
layer = gsub(".gpx","",i),
driver = "ESRI Shapefile"
)
}else{
rgdal::writeOGR(
obj = y,
dsn = saveto,
layer = gsub(".gpx","",i),
driver = "ESRI Shapefile"
)
}
}else{
warning(paste(i,"does not contain data."))
}
}
}
gpx2shp(
folder = "D:/Datasets/GPS/Montana_2/GPX"
)
devtools::check()
remove.packages("mnsentinellakes", lib="~/R/win-library/3.5")
devtools::install_github("mnsentinellakes/mnsentinellakes")
lakefinderdownload = function(lakeid) {
lakeid = lakeid[1]
if (grepl("^htt", lakeid)) {
tmp = httr::parse_url(lakeid)
if (!is.null(tmp$query$downum)) {
lakeid <- tmp$query$downum
} else {
stop("Invalid URL specified", call.=FALSE)
}
}
httr::GET(
url = "http://maps2.dnr.state.mn.us/cgi-bin/lakefinder/detail.cgi",
query = list(
type = "lake_survey",
callback = "",
id = lakeid,
`_` = as.numeric(Sys.time())
)
) -> res
httr::stop_for_status(res)
out = httr::content(res, as="text", encoding="UTF-8")
out = jsonlite::fromJSON(out, flatten=TRUE)
if (!is.null(out$result)){
out[["LakeId"]]=lakeid
}else{
warning(out$message)
out=NULL
}
return(out)
}
lakefinderdownload("26024800")
lakefinderdownload("06000200")
rfishbase::ecosystem("Lepomis macrochirus")
rfishbase::ecosystem(mnsentinellakes::fishcommon2scientific("Shovelnose Sturgeon"))
z=rfishbase::ecosystem(mnsentinellakes::fishcommon2scientific("Shovelnose Sturgeon"))
View(z)
z=rfishbase::ecosystem(mnsentinellakes::fishcommon2scientific("Cisco"))
remove.packages(mnsentinellakes)
remove.packages("mnsentinellakes")
#Datasets
#Sentinel LAkes
sentinellakesmetadata=data.frame(
"Lake"=c("Artichoke","Bear Head","Belle","Carlos","Carrie","Cedar","Echo","Elephant","Elk","Greenwood","Hill","Madison","Pearl","Peltier",
"Portage","Red Sand","Shaokotan","South Center","South Twin","St. James","St. Olaf","Tait","Ten Mile","Trout","White Iron"),
"Code"=c("ART","BHD","BEL","CLS","CAE","CED","ECH","EPH","ELK","GRW","HIL","MAD","PRL","PLT","PTG","RDS","SHK","SCR","STW","STJ","STO","TAI",
"TEN","TRT","WHI"),
"LakeId"=c("06000200","69025400","47004901","21005700","34003200","49014000","69061500","69081000","15001000","16007700","01014200",
"07004400","73003700","02000400","29025000","18038600","41008900","13002700","44001400","83004300","81000300","16038400",
"11041300","16004900","69000400"),
"Ecoregion"=c("Western Corn Belt Plains","Northern Lakes and Forests","North Central Hardwood Forests","North Central Hardwood Forests",
"Western Corn Belt Plains","North Central Hardwood Forests","Canadian Shield","Canadian Shield","Northern Lakes and Forests",
"Canadian Shield","Northern Lakes and Forests","Western Corn Belt Plains","North Central Hardwood Forests",
"North Central Hardwood Forests","Northern Lakes and Forests","Northern Lakes and Forests","Western Corn Belt Plains",
"North Central Hardwood Forests","Northern Lakes and Forests","Western Corn Belt Plains","Western Corn Belt Plains",
"Canadian Shield","Northern Lakes and Forests","Canadian Shield","Canadian Shield"),
"MultiLogger"=c(FALSE,TRUE,FALSE,TRUE,FALSE,FALSE,FALSE,FALSE,TRUE,TRUE,FALSE,TRUE,TRUE,TRUE,FALSE,FALSE,TRUE,TRUE,FALSE,FALSE,TRUE,FALSE,
FALSE,TRUE,TRUE),
"IATA"=c("AQP","ELO","HCD","AXN","LJF","14Y","ORB","ORB","PKD","CKC","GPZ","MKT","STC","ANE","PKD","BRD","CNB","OEO","FSE","JYG","ACQ","CKC",
"XVG","CKC","ELO"),
stringsAsFactors = FALSE
)
devtools::build()
devtools::install("D:/R_Packages_Development/mnsentinellakes")
#Datasets
#Sentinel LAkes
sentinellakesmetadata=data.frame(
"Lake"=c("Artichoke","Bear Head","Belle","Carlos","Carrie","Cedar","Echo","Elephant","Elk","Greenwood","Hill","Madison","Pearl","Peltier",
"Portage","Red Sand","Shaokotan","South Center","South Twin","St. James","St. Olaf","Tait","Ten Mile","Trout","White Iron"),
"Code"=c("ART","BHD","BEL","CLS","CAE","CED","ECH","EPH","ELK","GRW","HIL","MAD","PRL","PLT","PTG","RDS","SHK","SCR","STW","STJ","STO","TAI",
"TEN","TRT","WHI"),
"LakeId"=c("06000200","69025400","47004901","21005700","34003200","49014000","69061500","69081000","15001000","16007700","01014200",
"07004400","73003700","02000400","29025000","18038600","41008900","13002700","44001400","83004300","81000300","16038400",
"11041300","16004900","69000400"),
"Ecoregion"=c("Western Corn Belt Plains","Northern Lakes and Forests","North Central Hardwood Forests","North Central Hardwood Forests",
"Western Corn Belt Plains","North Central Hardwood Forests","Canadian Shield","Canadian Shield","Northern Lakes and Forests",
"Canadian Shield","Northern Lakes and Forests","Western Corn Belt Plains","North Central Hardwood Forests",
"North Central Hardwood Forests","Northern Lakes and Forests","Northern Lakes and Forests","Western Corn Belt Plains",
"North Central Hardwood Forests","Northern Lakes and Forests","Western Corn Belt Plains","Western Corn Belt Plains",
"Canadian Shield","Northern Lakes and Forests","Canadian Shield","Canadian Shield"),
"MultiLogger"=c(FALSE,TRUE,FALSE,TRUE,FALSE,FALSE,FALSE,FALSE,TRUE,TRUE,FALSE,TRUE,TRUE,TRUE,FALSE,FALSE,TRUE,TRUE,FALSE,FALSE,TRUE,FALSE,
FALSE,TRUE,TRUE),
"IATA"=c("AQP","ELO","HCD","AXN","LJF","14Y","ORB","ORB","PKD","CKC","GPZ","MKT","STC","ANE","PKD","BRD","CNB","OEO","FSE","JYG","ACQ","CKC",
"XVG","CKC","ELO"),
stringsAsFactors = FALSE
)
#Minnesota Lakes
mnlakesmetadata=read.csv("D:/R_Scripts/Reference_Data/alllakes.csv",stringsAsFactors = FALSE)
mnlakesmetadata$LakeId=mnsentinellakes::fixlakeid(mnlakesmetadata$LakeId)
mnlakesmetadata$Lake=as.character(mnlakesmetadata$Lake)
#Fish Species
fishspeciesmetadata=data.frame(
"Code"=c("LMB","SMB","BLG","YEP","NOP","BLC","BRB","YEB","RKB","BLB","WTS","WAE","LAT","CCF","MUE","WHB"),
"Name"=c("Largemouth Bass","Smallmouth Bass","Bluegill","Yellow Perch","Northern Pike","Black Crappie","Brown Bullhead",
"Yellow Bullhead","Rock Bass","Black Bullhead","White Sucker","Walleye","Lake Trout","Channel Catfish","Muskellunge","White Bass"),
"Group"=c("Centrarchid","Centrarchid","Centrarchid","Percid","Esocid","Centrarchid","Ictalurid","Ictalurid","Centrarchid","Ictalurid","Catastomid","Percid",
"Salmonid","Ictalurid","Esocid","Moronid"),
"Gear"=c("Standard electrofishing","Standard electrofishing","Standard trap nets","Standard gill nets","Standard gill nets",
"Standard trap nets","Standard gill nets","Standard gill nets","Standard gill nets","Standard gill nets","Standard gill nets","Standard gill nets",
"Standard gill nets","Standard trap nets","Standard trap nets","Standard gill nets"),
stringsAsFactors = FALSE
)
#MNPCA Stations
sentinelmnpcastations=read.csv("D:/R_Scripts/Reference_Data/MNPCA_Stations.csv",stringsAsFactors = FALSE)
mnpcastations=read.csv("D:/R_Scripts/Reference_Data/MNPCA_WQ_Codes_All.csv",stringsAsFactors = FALSE)
#Fish Abbreviations
fishabbreviations=read.csv("D:/R_Scripts/Reference_Data/Fish_Codes.csv",stringsAsFactors = FALSE,fileEncoding = "ASCII")
usethis::use_data(sentinellakesmetadata,mnlakesmetadata,fishspeciesmetadata,sentinelmnpcastations,mnpcastations,fishabbreviations,
internal = FALSE,overwrite = TRUE)
library(mnsentinellakes)
#Fish Abbreviations
fishabbreviations=read.csv("D:/R_Scripts/Reference_Data/Fish_Codes.csv",stringsAsFactors = FALSE,fileEncoding = "ASCII")
View(fishabbreviations)
remove.packages("mnsentinellakes")
setwd("D:/R_Packages_Development/mnsentinellakes")
devtools::install("D:/R_Packages_Development/mnsentinellakes")
remove.packages("mnsentinellakes")
devtools::build()
devtools::install("D:/R_Packages_Development/mnsentinellakes")
devtools::install("D:/R_Packages_Development/mnsentinellakes")
devtools::build()
devtools::install("D:/R_Packages_Development/mnsentinellakes")
devtools::build()
devtools::install("D:/R_Packages_Development/mnsentinellakes")
library(mnsentinellakes)
fishabbrev2common(FRD)
fishabbrev2common("FRD")
devtools::check()
fishabbrev2common("FRD")
devtools::build()
devtools::install("D:/R_Packages_Development/mnsentinellakes")
library(mnsentinellakes)
fishabbrev2common("FRD")
fishabbrev2scientific("FRD")
fishcommon2abbrev("Freshwater Drum")
fishcommon2abbrev("Sheepshead")
fishcommon2scientific("Freshwater Drum")
fishcommon2scientific("Sheepshead")
fishscientific2abbrev("Aplodinotus grunniens")
fishscientific2common("Aplodinotus grunniens")
fishscientific2abbrev
fishscientific2abbrev=function(scientificname){
if(scientificname %in% mnsentinellakes::fishabbreviations$Scientific_Name){
fishabbrevout=mnsentinellakes::fishabbreviations$Code[mnsentinellakes::fishabbreviations$Scientific_Name==scientificname &
mnsentinellakes::fishabbreviations$Prime==TRUE]
fishabbrevout=fishabbrevout[!is.na(fishabbrevout)]
}else{
warning("No abbreviation associated with this name")
fishabbrevout=NULL
}
return(fishabbrevout)
}
fishscientific2abbrev("Aplodinotis grunniens")
fishscientific2abbrev("Aplodinotus grunniens")
remove.packages("mnsentinellakes")
install_github("mnsentinellakes/mnsentinellakes")
library(devtools)
install_github("mnsentinellakes/mnsentinellakes")
library(mnsentinellakes)
library(mnsentinellakes)
?wqmonthtrendplots
fixlakeid("6-0002-00")
#Tools
fixlakeid(6000200)
#Tools
fixlakeid(6000200)
fixlakeid("6-0002-00")
lakenametoid(
lakename = "Buffalo",
county = "Wright"
)
lakeidtoname("65001300")
fishabbrev2common("FED")
fishabbrev2common("FWD")
fishabbrev2common("FR")
fishabbrev2common("FRD")
fishabbrev2scientific("FRD")
fishcommon2scientific("Sheepshead")
fishscientific2abbrev("Aplodinotus grunniens")
fishscientific2common("Aplodinotus grunniens")
o=readaccessdatabase(
database = "D:/Shiny_App_Development/Research_Portal/v0.1a/data/App_DB.accdb",
sqtable = "Temperature_Daily"
)
remove.packages("mnsentinellakes")
devtools::install_github("mnsentinellakes/mnsentinellakes")
library(mnsentinellakes)
library(mnsentinellakes)
devtools::check()
remove.packages("mnsentinellakes")
devtools::install_github("mnsentinellakes/mnsentinellakes")
library(mnsentinellakes)
gpx2shp
