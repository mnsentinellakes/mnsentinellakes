"Source"=iceoutput$Source,"Comments"=iceoutput$Comment)
return(iceoutput)
}else{
print("No ice data for this lake")
}
View(x)
inputurl=paste0("https://maps1.dnr.state.mn.us/cgi-bin/climatology/ice_",i,"_by_lake.cgi?id=",lakeid)
x=as.character(xml2::read_html(inputurl))
x=as.character(regmatches(x,gregexpr("\\[.+\\]",x)))
if(x=="character(0)"){
reshapedf=NULL
}else{
x=gsub(c("\\["),"",x)
x=gsub(c("\\]"),"",x)
x=data.frame(strsplit(x,"[},{]"))
colnames(x)="Row"
x=suppressWarnings(tidyr::separate(
x,
"Row",
into = c("Header","Value"),
sep = "[:]"))
x=x[!is.na(x$Value),]
x$Header=gsub("\"","",x$Header)
x$Value=gsub("\"","",x$Value)
reshapedf=NULL
for (k in 0:((nrow(x)/3)-1)){
selection=(k*3)+c(1,2,3)
rows=x[selection,]
#Date
daterow=rows$Value[which(rows$Header=="date")]
#Source
sourcerow=rows$Value[which(rows$Header=="source")]
#Comment
commentrow=rows$Value[which(rows$Header=="comments")]
reshaperow=data.frame("Date"=daterow,"Source"=sourcerow,"Comment"=commentrow)
reshapedf=rbind(reshapedf,reshaperow)
}
reshapedf["Ice_Status"]=icestatus
}
iceoutput=NULL
for (i in c("in","out")){
if (i=="in"){
icestatus="In"
}else if (i=="out"){
icestatus="Out"
}
inputurl=paste0("https://maps1.dnr.state.mn.us/cgi-bin/climatology/ice_",i,"_by_lake.cgi?id=",lakeid)
x=as.character(xml2::read_html(inputurl))
x=as.character(regmatches(x,gregexpr("\\[.+\\]",x)))
if(x=="character(0)"){
reshapedf=NULL
}else{
x=gsub(c("\\["),"",x)
x=gsub(c("\\]"),"",x)
x=data.frame(strsplit(x,"[},{]"))
colnames(x)="Row"
x=suppressWarnings(tidyr::separate(
x,
"Row",
into = c("Header","Value"),
sep = "[:]"))
x=x[!is.na(x$Value),]
x$Header=gsub("\"","",x$Header)
x$Value=gsub("\"","",x$Value)
reshapedf=NULL
for (k in 0:((nrow(x)/3)-1)){
selection=(k*3)+c(1,2,3)
rows=x[selection,]
#Date
daterow=rows$Value[which(rows$Header=="date")]
#Source
sourcerow=rows$Value[which(rows$Header=="source")]
#Comment
commentrow=rows$Value[which(rows$Header=="comments")]
reshaperow=data.frame("Date"=daterow,"Source"=sourcerow,"Comment"=commentrow)
reshapedf=rbind(reshapedf,reshaperow)
}
reshapedf["Ice_Status"]=icestatus
}
iceoutput=rbind(iceoutput,reshapedf)
}
iceoutput$Date=as.Date(iceoutput$Date)
iceoutput=iceoutput[order(iceoutput$Date),]
iceoutput=data.frame("Lake"=lakename,"LakeId"=lakeid,"Date"=iceoutput$Date,"Ice_Status"=iceoutput$Ice_Status,
"Source"=iceoutput$Source,"Comments"=iceoutput$Comment)
if (length(lakename)>0){
iceoutput=NULL
for (i in c("in","out")){
if (i=="in"){
icestatus="In"
}else if (i=="out"){
icestatus="Out"
}
inputurl=paste0("https://maps1.dnr.state.mn.us/cgi-bin/climatology/ice_",i,"_by_lake.cgi?id=",lakeid)
x=as.character(xml2::read_html(inputurl))
x=as.character(regmatches(x,gregexpr("\\[.+\\]",x)))
if(x=="character(0)"){
reshapedf=NULL
}else{
x=gsub(c("\\["),"",x)
x=gsub(c("\\]"),"",x)
x=data.frame(strsplit(x,"[},{]"))
colnames(x)="Row"
x=suppressWarnings(tidyr::separate(
x,
"Row",
into = c("Header","Value"),
sep = "[:]"))
x=x[!is.na(x$Value),]
x$Header=gsub("\"","",x$Header)
x$Value=gsub("\"","",x$Value)
reshapedf=NULL
for (k in 0:((nrow(x)/3)-1)){
selection=(k*3)+c(1,2,3)
rows=x[selection,]
#Date
daterow=rows$Value[which(rows$Header=="date")]
#Source
sourcerow=rows$Value[which(rows$Header=="source")]
#Comment
commentrow=rows$Value[which(rows$Header=="comments")]
reshaperow=data.frame("Date"=daterow,"Source"=sourcerow,"Comment"=commentrow)
reshapedf=rbind(reshapedf,reshaperow)
}
reshapedf["Ice_Status"]=icestatus
}
iceoutput=rbind(iceoutput,reshapedf)
}
iceoutput$Date=as.Date(iceoutput$Date)
iceoutput=iceoutput[order(iceoutput$Date),]
iceoutput=data.frame("Lake"=lakename,"LakeId"=lakeid,"Date"=iceoutput$Date,"Ice_Status"=iceoutput$Ice_Status,
"Source"=iceoutput$Source,"Comments"=iceoutput$Comment)
return(iceoutput)
}else{
print("No ice data for this lake")
}
lakeid="21005700"
lakename=mnsentinellakes::mnlakesmetadata$Lake[mnsentinellakes::mnlakesmetadata$LakeId==lakeid]
if (length(lakename)>0){
iceoutput=NULL
for (i in c("in","out")){
if (i=="in"){
icestatus="In"
}else if (i=="out"){
icestatus="Out"
}
inputurl=paste0("https://maps1.dnr.state.mn.us/cgi-bin/climatology/ice_",i,"_by_lake.cgi?id=",lakeid)
x=as.character(xml2::read_html(inputurl))
x=as.character(regmatches(x,gregexpr("\\[.+\\]",x)))
if(x=="character(0)"){
reshapedf=NULL
}else{
x=gsub(c("\\["),"",x)
x=gsub(c("\\]"),"",x)
x=data.frame(strsplit(x,"[},{]"))
colnames(x)="Row"
x=suppressWarnings(tidyr::separate(
x,
"Row",
into = c("Header","Value"),
sep = "[:]"))
x=x[!is.na(x$Value),]
x$Header=gsub("\"","",x$Header)
x$Value=gsub("\"","",x$Value)
reshapedf=NULL
for (k in 0:((nrow(x)/3)-1)){
selection=(k*3)+c(1,2,3)
rows=x[selection,]
#Date
daterow=rows$Value[which(rows$Header=="date")]
#Source
sourcerow=rows$Value[which(rows$Header=="source")]
#Comment
commentrow=rows$Value[which(rows$Header=="comments")]
reshaperow=data.frame("Date"=daterow,"Source"=sourcerow,"Comment"=commentrow)
reshapedf=rbind(reshapedf,reshaperow)
}
reshapedf["Ice_Status"]=icestatus
}
iceoutput=rbind(iceoutput,reshapedf)
}
iceoutput$Date=as.Date(iceoutput$Date)
iceoutput=iceoutput[order(iceoutput$Date),]
iceoutput=data.frame("Lake"=lakename,"LakeId"=lakeid,"Date"=iceoutput$Date,"Ice_Status"=iceoutput$Ice_Status,
"Source"=iceoutput$Source,"Comments"=iceoutput$Comment)
}else{
iceoutput=print("No ice data for this lake")
}
lakeid="21005706"
lakename=mnsentinellakes::mnlakesmetadata$Lake[mnsentinellakes::mnlakesmetadata$LakeId==lakeid]
if (length(lakename)>0){
iceoutput=NULL
for (i in c("in","out")){
if (i=="in"){
icestatus="In"
}else if (i=="out"){
icestatus="Out"
}
inputurl=paste0("https://maps1.dnr.state.mn.us/cgi-bin/climatology/ice_",i,"_by_lake.cgi?id=",lakeid)
x=as.character(xml2::read_html(inputurl))
x=as.character(regmatches(x,gregexpr("\\[.+\\]",x)))
if(x=="character(0)"){
reshapedf=NULL
}else{
x=gsub(c("\\["),"",x)
x=gsub(c("\\]"),"",x)
x=data.frame(strsplit(x,"[},{]"))
colnames(x)="Row"
x=suppressWarnings(tidyr::separate(
x,
"Row",
into = c("Header","Value"),
sep = "[:]"))
x=x[!is.na(x$Value),]
x$Header=gsub("\"","",x$Header)
x$Value=gsub("\"","",x$Value)
reshapedf=NULL
for (k in 0:((nrow(x)/3)-1)){
selection=(k*3)+c(1,2,3)
rows=x[selection,]
#Date
daterow=rows$Value[which(rows$Header=="date")]
#Source
sourcerow=rows$Value[which(rows$Header=="source")]
#Comment
commentrow=rows$Value[which(rows$Header=="comments")]
reshaperow=data.frame("Date"=daterow,"Source"=sourcerow,"Comment"=commentrow)
reshapedf=rbind(reshapedf,reshaperow)
}
reshapedf["Ice_Status"]=icestatus
}
iceoutput=rbind(iceoutput,reshapedf)
}
iceoutput$Date=as.Date(iceoutput$Date)
iceoutput=iceoutput[order(iceoutput$Date),]
iceoutput=data.frame("Lake"=lakename,"LakeId"=lakeid,"Date"=iceoutput$Date,"Ice_Status"=iceoutput$Ice_Status,
"Source"=iceoutput$Source,"Comments"=iceoutput$Comment)
}else{
iceoutput=print("No ice data for this lake")
}
return(iceoutput)
icedownload=function(lakeid){
lakename=mnsentinellakes::mnlakesmetadata$Lake[mnsentinellakes::mnlakesmetadata$LakeId==lakeid]
if (length(lakename)>0){
iceoutput=NULL
for (i in c("in","out")){
if (i=="in"){
icestatus="In"
}else if (i=="out"){
icestatus="Out"
}
inputurl=paste0("https://maps1.dnr.state.mn.us/cgi-bin/climatology/ice_",i,"_by_lake.cgi?id=",lakeid)
x=as.character(xml2::read_html(inputurl))
x=as.character(regmatches(x,gregexpr("\\[.+\\]",x)))
if(x=="character(0)"){
reshapedf=NULL
}else{
x=gsub(c("\\["),"",x)
x=gsub(c("\\]"),"",x)
x=data.frame(strsplit(x,"[},{]"))
colnames(x)="Row"
x=suppressWarnings(tidyr::separate(
x,
"Row",
into = c("Header","Value"),
sep = "[:]"))
x=x[!is.na(x$Value),]
x$Header=gsub("\"","",x$Header)
x$Value=gsub("\"","",x$Value)
reshapedf=NULL
for (k in 0:((nrow(x)/3)-1)){
selection=(k*3)+c(1,2,3)
rows=x[selection,]
#Date
daterow=rows$Value[which(rows$Header=="date")]
#Source
sourcerow=rows$Value[which(rows$Header=="source")]
#Comment
commentrow=rows$Value[which(rows$Header=="comments")]
reshaperow=data.frame("Date"=daterow,"Source"=sourcerow,"Comment"=commentrow)
reshapedf=rbind(reshapedf,reshaperow)
}
reshapedf["Ice_Status"]=icestatus
}
iceoutput=rbind(iceoutput,reshapedf)
}
iceoutput$Date=as.Date(iceoutput$Date)
iceoutput=iceoutput[order(iceoutput$Date),]
iceoutput=data.frame("Lake"=lakename,"LakeId"=lakeid,"Date"=iceoutput$Date,"Ice_Status"=iceoutput$Ice_Status,
"Source"=iceoutput$Source,"Comments"=iceoutput$Comment)
}else{
iceoutput=print("No ice data for this lake")
}
return(iceoutput)
}
icedownload("69025400")
devtools::install_github("mnsentinellakes/mnsentinellakes")
library(mnsentinellakes)
library(mnsentinellakes)
remove.packages("mnsentinellakes", lib="~/R/win-library/3.5")
devtools::install_github("mnsentinellakes/mnsentinellakes")
library("mnsentinellakes", lib.loc="~/R/win-library/3.5")
?wqdownload
library(mnsentinellakes)
z=lakefinderdownload("21005700")
z$result$averageWaterClarity
z$result$sampledPlants
z$result$surveys
z$result$surveys$narrative
z$result$surveys$narrative[1]
z$result$surveys$lengths.HSF.maximum_length
z$result$maxDepthFeet
z$result$waterClarity
z$result$officeCode
z$result$accesses
z$result$shoreLengthMiles
z$result$sampledPlants
z$message
z$status
z$result$DOWNumber
z$result$meanDepthFeet
z=lakefinderdownload("48000200")
z$result$meanDepthFeet
z$result$sampledPlants
z$result$surveys$fishCatchSummaries
z$result$surveys$headerInfo
z$result$surveys$narrative
z$result$surveys$narrative[1]
z$result$surveys$narrative[2]
z$result$surveys$narrative[3]
z$result$surveys$narrative[4]
z$result$surveys$narrative[5]
z$result$surveys$narrative[6]
z$result$surveys$narrative[7]
z$result$surveys$narrative[8]
z$result$surveys$narrative[9]
z$result$surveys$narrative[10]
length(z$result$surveys$narrative)
z$result$surveys$narrative[28]
z$result$surveys$narrative[27]
z$result$surveys$narrative[26]
shiny::runApp('D:/Shiny_App_Development/Research_Portal/v0.1a')
fixlakeid(6000200)
fixlakeid("6-0002-00")
lakeidtoname("06000200")
lakenametoid(
"Peltier",
county = "Anoka"
)
x=lakefinderdownload("06000200")
runApp('D:/Shiny_App_Development/Research_Portal/v0.1a')
#Datasets
#Sentinel LAkes
sentinellakesmetadata=data.frame(
"Lake"=c("Artichoke","Bear Head","Belle","Carlos","Carrie","Cedar","Echo","Elephant","Elk","Greenwood","Hill","Madison","Pearl","Peltier",
"Portage","Red Sand","Shaokotan","South Center","South Twin","St. James","St. Olaf","Tait","Ten Mile","Trout","White Iron"),
"Code"=c("ART","BHD","BEL","CLS","CAE","CED","ECH","EPH","ELK","GRW","HIL","MAD","PRL","PLT","PTG","RDS","SHK","SCR","STW","STJ","STO","TAI",
"TEN","TRT","WHI"),
"LakeId"=c("06000200","69025400","47004901","21005700","34003200","49014000","69061500","69081000","15001000","16007700","01014200",
"07004400","73003700","02000400","29025000","18038600","41008900","13002700","44001400","83004300","81000300","16038400",
"11041300","16004900","69000400"),
"Ecoregion"=c("Western Corn Belt Plains","Northern Lakes and Forests","North Central Hardwood Forests","North Central Hardwood Forests",
"Western Corn Belt Plains","North Central Hardwood Forests","Canadian Shield","Canadian Shield","Northern Lakes and Forests",
"Canadian Shield","Northern Lakes and Forests","Western Corn Belt Plains","North Central Hardwood Forests",
"North Central Hardwood Forests","Northern Lakes and Forests","Northern Lakes and Forests","Western Corn Belt Plains",
"North Central Hardwood Forests","Northern Lakes and Forests","Western Corn Belt Plains","Western Corn Belt Plains",
"Canadian Shield","Northern Lakes and Forests","Canadian Shield","Canadian Shield"),
"MultiLogger"=c(FALSE,TRUE,FALSE,TRUE,FALSE,FALSE,FALSE,FALSE,TRUE,TRUE,FALSE,TRUE,TRUE,TRUE,FALSE,FALSE,TRUE,TRUE,FALSE,FALSE,TRUE,FALSE,
FALSE,TRUE,TRUE),
"IATA"=c("AQP","ELO","HCD","AXN","LJF","14Y","ORB","ORB","PKD","CKC","GPZ","MKT","STC","ANE","PKD","BRD","CNB","OEO","FSE","JYG","ACQ","CKC",
"XVG","CKC","ELO"),
stringsAsFactors = FALSE
)
#Minnesota Lakes
mnlakesmetadata=read.csv("D:/R_Scripts/Reference_Data/alllakes.csv",stringsAsFactors = FALSE)
mnlakesmetadata$LakeId=mnsentinellakes::fixlakeid(mnlakesmetadata$LakeId)
mnlakesmetadata$Lake=as.character(mnlakesmetadata$Lake)
#Fish Species
fishspeciesmetadata=data.frame(
"Code"=c("LMB","SMB","BLG","YEP","NOP","BLC","BRB","YEB","RKB","BLB","WTS","WAE","LAT","CCF","MUE","WHB"),
"Name"=c("Largemouth Bass","Smallmouth Bass","Bluegill","Yellow Perch","Northern Pike","Black Crappie","Brown Bullhead",
"Yellow Bullhead","Rock Bass","Black Bullhead","White Sucker","Walleye","Lake Trout","Channel Catfish","Muskellunge","White Bass"),
"Group"=c("Centrarchid","Centrarchid","Centrarchid","Percid","Esocid","Centrarchid","Ictalurid","Ictalurid","Centrarchid","Ictalurid","Catastomid","Percid",
"Salmonid","Ictalurid","Esocid","Moronid"),
"Gear"=c("Standard electrofishing","Standard electrofishing","Standard trap nets","Standard gill nets","Standard gill nets",
"Standard trap nets","Standard gill nets","Standard gill nets","Standard gill nets","Standard gill nets","Standard gill nets","Standard gill nets",
"Standard gill nets","Standard trap nets","Standard trap nets","Standard gill nets"),
stringsAsFactors = FALSE
)
#MNPCA Stations
sentinelmnpcastations=read.csv("D:/R_Scripts/Reference_Data/MNPCA_Stations.csv",stringsAsFactors = FALSE)
mnpcastations=read.csv("D:/R_Scripts/Reference_Data/MNPCA_WQ_Codes_All.csv",stringsAsFactors = FALSE)
#Fish Abbreviations
fishabbreviations=read.csv("D:/R_Scripts/Reference_Data/Fish_Codes.csv",stringsAsFactors = FALSE)
#Datasets
#Sentinel LAkes
sentinellakesmetadata=data.frame(
"Lake"=c("Artichoke","Bear Head","Belle","Carlos","Carrie","Cedar","Echo","Elephant","Elk","Greenwood","Hill","Madison","Pearl","Peltier",
"Portage","Red Sand","Shaokotan","South Center","South Twin","St. James","St. Olaf","Tait","Ten Mile","Trout","White Iron"),
"Code"=c("ART","BHD","BEL","CLS","CAE","CED","ECH","EPH","ELK","GRW","HIL","MAD","PRL","PLT","PTG","RDS","SHK","SCR","STW","STJ","STO","TAI",
"TEN","TRT","WHI"),
"LakeId"=c("06000200","69025400","47004901","21005700","34003200","49014000","69061500","69081000","15001000","16007700","01014200",
"07004400","73003700","02000400","29025000","18038600","41008900","13002700","44001400","83004300","81000300","16038400",
"11041300","16004900","69000400"),
"Ecoregion"=c("Western Corn Belt Plains","Northern Lakes and Forests","North Central Hardwood Forests","North Central Hardwood Forests",
"Western Corn Belt Plains","North Central Hardwood Forests","Canadian Shield","Canadian Shield","Northern Lakes and Forests",
"Canadian Shield","Northern Lakes and Forests","Western Corn Belt Plains","North Central Hardwood Forests",
"North Central Hardwood Forests","Northern Lakes and Forests","Northern Lakes and Forests","Western Corn Belt Plains",
"North Central Hardwood Forests","Northern Lakes and Forests","Western Corn Belt Plains","Western Corn Belt Plains",
"Canadian Shield","Northern Lakes and Forests","Canadian Shield","Canadian Shield"),
"MultiLogger"=c(FALSE,TRUE,FALSE,TRUE,FALSE,FALSE,FALSE,FALSE,TRUE,TRUE,FALSE,TRUE,TRUE,TRUE,FALSE,FALSE,TRUE,TRUE,FALSE,FALSE,TRUE,FALSE,
FALSE,TRUE,TRUE),
"IATA"=c("AQP","ELO","HCD","AXN","LJF","14Y","ORB","ORB","PKD","CKC","GPZ","MKT","STC","ANE","PKD","BRD","CNB","OEO","FSE","JYG","ACQ","CKC",
"XVG","CKC","ELO"),
stringsAsFactors = FALSE
)
#Minnesota Lakes
mnlakesmetadata=read.csv("D:/R_Scripts/Reference_Data/alllakes.csv",stringsAsFactors = FALSE)
mnlakesmetadata$LakeId=mnsentinellakes::fixlakeid(mnlakesmetadata$LakeId)
mnlakesmetadata$Lake=as.character(mnlakesmetadata$Lake)
#Fish Species
fishspeciesmetadata=data.frame(
"Code"=c("LMB","SMB","BLG","YEP","NOP","BLC","BRB","YEB","RKB","BLB","WTS","WAE","LAT","CCF","MUE","WHB"),
"Name"=c("Largemouth Bass","Smallmouth Bass","Bluegill","Yellow Perch","Northern Pike","Black Crappie","Brown Bullhead",
"Yellow Bullhead","Rock Bass","Black Bullhead","White Sucker","Walleye","Lake Trout","Channel Catfish","Muskellunge","White Bass"),
"Group"=c("Centrarchid","Centrarchid","Centrarchid","Percid","Esocid","Centrarchid","Ictalurid","Ictalurid","Centrarchid","Ictalurid","Catastomid","Percid",
"Salmonid","Ictalurid","Esocid","Moronid"),
"Gear"=c("Standard electrofishing","Standard electrofishing","Standard trap nets","Standard gill nets","Standard gill nets",
"Standard trap nets","Standard gill nets","Standard gill nets","Standard gill nets","Standard gill nets","Standard gill nets","Standard gill nets",
"Standard gill nets","Standard trap nets","Standard trap nets","Standard gill nets"),
stringsAsFactors = FALSE
)
setwd("D:/R_Packages_Development/mnsentinellakes")
#Datasets
#Sentinel LAkes
sentinellakesmetadata=data.frame(
"Lake"=c("Artichoke","Bear Head","Belle","Carlos","Carrie","Cedar","Echo","Elephant","Elk","Greenwood","Hill","Madison","Pearl","Peltier",
"Portage","Red Sand","Shaokotan","South Center","South Twin","St. James","St. Olaf","Tait","Ten Mile","Trout","White Iron"),
"Code"=c("ART","BHD","BEL","CLS","CAE","CED","ECH","EPH","ELK","GRW","HIL","MAD","PRL","PLT","PTG","RDS","SHK","SCR","STW","STJ","STO","TAI",
"TEN","TRT","WHI"),
"LakeId"=c("06000200","69025400","47004901","21005700","34003200","49014000","69061500","69081000","15001000","16007700","01014200",
"07004400","73003700","02000400","29025000","18038600","41008900","13002700","44001400","83004300","81000300","16038400",
"11041300","16004900","69000400"),
"Ecoregion"=c("Western Corn Belt Plains","Northern Lakes and Forests","North Central Hardwood Forests","North Central Hardwood Forests",
"Western Corn Belt Plains","North Central Hardwood Forests","Canadian Shield","Canadian Shield","Northern Lakes and Forests",
"Canadian Shield","Northern Lakes and Forests","Western Corn Belt Plains","North Central Hardwood Forests",
"North Central Hardwood Forests","Northern Lakes and Forests","Northern Lakes and Forests","Western Corn Belt Plains",
"North Central Hardwood Forests","Northern Lakes and Forests","Western Corn Belt Plains","Western Corn Belt Plains",
"Canadian Shield","Northern Lakes and Forests","Canadian Shield","Canadian Shield"),
"MultiLogger"=c(FALSE,TRUE,FALSE,TRUE,FALSE,FALSE,FALSE,FALSE,TRUE,TRUE,FALSE,TRUE,TRUE,TRUE,FALSE,FALSE,TRUE,TRUE,FALSE,FALSE,TRUE,FALSE,
FALSE,TRUE,TRUE),
"IATA"=c("AQP","ELO","HCD","AXN","LJF","14Y","ORB","ORB","PKD","CKC","GPZ","MKT","STC","ANE","PKD","BRD","CNB","OEO","FSE","JYG","ACQ","CKC",
"XVG","CKC","ELO"),
stringsAsFactors = FALSE
)
#Minnesota Lakes
mnlakesmetadata=read.csv("D:/R_Scripts/Reference_Data/alllakes.csv",stringsAsFactors = FALSE)
mnlakesmetadata$LakeId=mnsentinellakes::fixlakeid(mnlakesmetadata$LakeId)
mnlakesmetadata$Lake=as.character(mnlakesmetadata$Lake)
#Fish Species
fishspeciesmetadata=data.frame(
"Code"=c("LMB","SMB","BLG","YEP","NOP","BLC","BRB","YEB","RKB","BLB","WTS","WAE","LAT","CCF","MUE","WHB"),
"Name"=c("Largemouth Bass","Smallmouth Bass","Bluegill","Yellow Perch","Northern Pike","Black Crappie","Brown Bullhead",
"Yellow Bullhead","Rock Bass","Black Bullhead","White Sucker","Walleye","Lake Trout","Channel Catfish","Muskellunge","White Bass"),
"Group"=c("Centrarchid","Centrarchid","Centrarchid","Percid","Esocid","Centrarchid","Ictalurid","Ictalurid","Centrarchid","Ictalurid","Catastomid","Percid",
"Salmonid","Ictalurid","Esocid","Moronid"),
"Gear"=c("Standard electrofishing","Standard electrofishing","Standard trap nets","Standard gill nets","Standard gill nets",
"Standard trap nets","Standard gill nets","Standard gill nets","Standard gill nets","Standard gill nets","Standard gill nets","Standard gill nets",
"Standard gill nets","Standard trap nets","Standard trap nets","Standard gill nets"),
stringsAsFactors = FALSE
)
#MNPCA Stations
mnpcastations=read.csv("D:/R_Scripts/Reference_Data/MNPCA_Stations.csv",stringsAsFactors = FALSE)
#Fish Abbreviations
fishabbreviations=read.csv("D:/R_Scripts/Reference_Data/Fish_Codes.csv",stringsAsFactors = FALSE)
#MNPCA Stations
sentinelmnpcastations=read.csv("D:/R_Scripts/Reference_Data/MNPCA_Stations.csv",stringsAsFactors = FALSE)
mnpcastations=read.csv("D:/R_Scripts/Reference_Data/MNPCA_WQ_Codes.csv",stringsAsFactors = FALSE)
mnpcastations=read.csv("D:/R_Scripts/Reference_Data/MNPCA_WQ_Codes_All.csv",stringsAsFactors = FALSE)
#Fish Abbreviations
fishabbreviations=read.csv("D:/R_Scripts/Reference_Data/Fish_Codes.csv",stringsAsFactors = FALSE)
usethis::use_data(sentinellakesmetadata,mnlakesmetadata,fishspeciesmetadata,sentinelmnpcastations,mnpcastations,fishabbreviations,
internal = FALSE,overwrite = TRUE)
#MNPCA Stations
sentinelmnpcastations=read.csv("D:/R_Scripts/Reference_Data/MNPCA_Stations.csv",stringsAsFactors = FALSE)
mnpcastations=read.csv("D:/R_Scripts/Reference_Data/MNPCA_WQ_Codes_All.csv",stringsAsFactors = FALSE)
usethis::use_data(sentinellakesmetadata,mnlakesmetadata,fishspeciesmetadata,sentinelmnpcastations,mnpcastations,fishabbreviations,
internal = FALSE,overwrite = TRUE)
devtools::check()
devtools::check()
devtools::build()
devtools::install("D:/R_Packages_Development/mnsentinellakes")
library(mnsentinellakes)
lakeid="21005700"
stations=mnsentinellakes::sentinelmnpcastations$ID_CODE[mnsentinellakes::sentinelmnpcastations$LakeId==lakeid]
devtools::check()
devtools::check()
wqstations = function(lakeid){
if (lakeid %in% unique(mnsentinellakes::sentinelmnpcastations$LakeId)){
stations=mnsentinellakes::sentinelmnpcastations$ID_CODE[mnsentinellakes::sentinelmnpcastations$LakeId==lakeid]
}else if (lakeid %in% unique(mnsentinellakes::mnpcastations$LakeId)){
stations=mnsentinellakes::mnpcastations$ID_CODE[mnsentinellakes::mnpcastations$LakeId==lakeid]
}else{
stations=print("No stations on this lake")
}
return(stations)
}
wqstations("21005700")
devtools::check()
devtools::check()
devtools::build()
devtools::install("D:/R_Packages_Development/mnsentinellakes")
